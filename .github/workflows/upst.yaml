name: Generate JWT and RSA key pair
on: workflow_dispatch   # 手動実行。定期実行なら cron を追加

permissions:
  contents: read        # リポジトリ読み取りだけ（OIDC は使わないので id‑token 権限不要）

jobs:
  build-jwt:
    runs-on: ubuntu-latest

    steps:
      # 1) RSA 2048bit の鍵ペアを生成
      - name: Generate RSA key pair
        run: |
          mkdir -p keys
          openssl genrsa -out keys/private.pem 2048
          openssl rsa -pubout -in keys/private.pem -out keys/public.pem
          echo "✅ RSA key pair generated in ./keys"

      # 2) PyJWT をインストール
      - name: Install PyJWT
        run: pip install --quiet PyJWT cryptography

      # 3) 秘密鍵で JWT を署名して出力
      - name: Create signed JWT
        id: jwt
        run: |
          python - <<'PY'
          import time, jwt, pathlib, os, json

          # 鍵読み込み
          key_path = pathlib.Path("keys/private.pem")
          private_key = key_path.read_bytes()

          now = int(time.time())

          payload = {
              "iss": "https://github.com/${{ github.repository_owner }}",
              "sub": "repo:${{ github.repository }}:ref:${{ github.ref }}",
              "aud": "https://oraclecloud.com/",   # OCI Trust の Audience に合わせる
              "iat": now,
              "exp": now + 60                      # 60 秒有効
          }
          headers = {"kid": "example-kid"}         # 任意。OCI で使う場合は適切に設定

          token = jwt.encode(payload, private_key, algorithm="RS256", headers=headers)
          print(f"JWT={token}")                    # マスクしないので注意
          # GitHub Actions の出力変数にも設定
          print(f"::set-output name=token::{token}")
          PY

      # 4) 成果物として鍵ペアと JWT をアップロード（必要なら）
      - name: Upload keys & JWT
        uses: actions/upload-artifact@v4
        with:
          name: jwt-and-keys
          path: |
            keys/public.pem
            keys/private.pem
          # JWT はテキストファイルにして保存したい場合
          # echo "${{ steps.jwt.outputs.token }}" > jwt.txt
          # jwt.txt

